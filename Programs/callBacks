import os
import numpy as np
from skimage.io import imread
from skimage.color import rgb2lab, lab2rgb, rgb2gray, gray2rgb
import skimage.transform
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.layers import Conv2D, UpSampling2D, Dense, InputLayer, Concatenate, Reshape, RepeatVector
from tensorflow.keras.applications import InceptionResNetV2
from tensorflow.keras.models import Model, Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.applications.inception_resnet_v2 import preprocess_input
from tensorflow.keras.callbacks import LearningRateScheduler, EarlyStopping, ModelCheckpoint
import cv2
from tensorflow.keras.callbacks import Callback
#Callback for visualization during each epoch


import matplotlib.pyplot as plt
batch_size = 32 #for data generator, and training eveything even the model callbacks

class VisualizeColorization(tf.keras.callbacks.Callback):
    def __init__(self, sample_image_path):
        super(VisualizeColorization, self).__init__()
        self.sample_image_path = sample_image_path

    def on_epoch_end(self, epoch, logs=None):
        predicted_image = self.predict_single_image(self.sample_image_path)

        # Plot original and predicted images
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))
        original_image = plt.imread(self.sample_image_path)
        ax1.imshow(original_image)
        ax1.set_title('Original Image')
        ax1.axis('off')

        ax2.imshow(predicted_image)
        ax2.set_title('Predicted Image (Epoch {})'.format(epoch + 1))
        ax2.axis('off')

        plt.show()

    def predict_single_image(self, image_path):
        # Add your prediction code here
        # Example: Load image, preprocess, predict colorization
        predict_image_rgb = np.array((imread(image_path)))
        Encoder_image, Extractor_image, AB_channel = process(predict_image_rgb)
        BW_image = rgb2gray(predict_image_rgb)
        Encoder_image = Encoder_image.reshape((1, 224, 224, 1))
        Extractor_image = Extractor_image.reshape((1, 299, 299, 3))
        predicted = Final_model.predict([[Encoder_image], [Extractor_image]])
        Encoder_image = Encoder_image * 50
        Encoder_image = Encoder_image + 50
        predicted = predicted * 128
        Final_predicted_image = np.concatenate((Encoder_image, predicted), axis=-1)
        Final_predicted_image = lab2rgb(Final_predicted_image[0])
        Final_predicted_image = skimage.transform.resize(Final_predicted_image, (predict_image_rgb.shape[0], predict_image_rgb.shape[1], 3), anti_aliasing=True)
        return Final_predicted_image

# Instantiate the callback with the sample image path
sample_image_path = '/content/Dataset/mirflickr25k_preprocessed/Test/im103.jpg'  # Specify your sample image path here
visualize_callback = VisualizeColorization(sample_image_path)

# # Train the model with a learning rate schedule, colorization visualization, and early stopping
# def lr_schedule(epoch):
#     if epoch < 10:
#         return 0.001
#     else:
#         return 0.0001

# lr_scheduler = LearningRateScheduler(lr_schedule)


early_stopping = EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

#Model Checkpoint
from tensorflow.keras.callbacks import ModelCheckpoint

# Define the directory to save the model checkpoints
checkpoint_dir = '/content/drive/MyDrive/FinalExternal/Model Checkpoints/'

# Ensure the directory exists, or create it if it doesn't
os.makedirs(checkpoint_dir, exist_ok=True)

# Define the file path for saving model weights
checkpoint_path = checkpoint_dir + 'model_weights_epoch_{epoch:02d}.h5'

# Initialize the ModelCheckpoint callback
checkpoint_callback = ModelCheckpoint(
    filepath=checkpoint_path,
    save_freq=(int(len(train_filenames)/batch_size)*3),  # Save weights after every 3 epoch hopefully... logic == train_filenames length = number of train data, that divided/batch size gives number of batches per epoch that times 3
    verbose=1,
    save_best_only=False
)



class SaveTrainingLogs(Callback):
    def __init__(self, log_file):
        super().__init__()
        self.log_file = log_file

    def on_epoch_end(self, epoch, logs=None):
        with open(self.log_file, 'a') as f:
            f.write(f'Epoch {epoch+1} - MeanSquaredError: {logs["loss"]}, MeanAbsoluteError: {logs["mae"]}\n')

# Initialize custom callback
save_logs_callback = SaveTrainingLogs('/content/drive/MyDrive/FinalExternal/Logs/training_logs.txt')
